# Generated by Django 5.2.4 on 2025-10-29 16:43

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('interessados', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Criterio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao_criterio', models.CharField(help_text='Ex: Prioridade para beneficiários do Bolsa Família', max_length=100, verbose_name='Descrição do Critério')),
                ('tipo_criterio', models.CharField(choices=[('NIS', 'Programa Social (NIS)'), ('PCD', 'Necessidades Especiais (PCD)'), ('FOTOTIPO', 'Fototipo/Cor (Cotas Raciais)'), ('IDADE_CRESC', 'Idade Crescente (Mais Jovem Primeiro)'), ('IDADE_DECRESC', 'Idade Decrescente (Mais Velho Primeiro)'), ('FAIXA_ETARIA', 'Faixa Etária Específica'), ('ORDEM', 'Ordem de Inscrição'), ('CUSTOMIZADO', 'Critério Customizado')], help_text='Tipo determina como o critério será avaliado', max_length=20, verbose_name='Tipo de Critério')),
                ('ativo', models.BooleanField(default=True, help_text='Critérios inativos não aparecem para seleção', verbose_name='Ativo')),
                ('criado_em', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
            ],
            options={
                'verbose_name': 'Critério de Classificação',
                'verbose_name_plural': 'Critérios de Classificação',
                'ordering': ['tipo_criterio', 'descricao_criterio'],
            },
        ),
        migrations.CreateModel(
            name='Evento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', models.CharField(help_text='Nome do curso/evento', max_length=200, verbose_name='Descrição/Nome do Evento')),
                ('programa', models.TextField(blank=True, default='', help_text='Descrição detalhada do conteúdo programático', verbose_name='Programa/Conteúdo')),
                ('objetivo', models.TextField(blank=True, default='', help_text='Objetivos e competências a serem desenvolvidas', verbose_name='Objetivo')),
                ('pre_requisito', models.TextField(blank=True, default='', help_text='Requisitos necessários para participação', verbose_name='Pré-requisitos')),
                ('carga_horaria', models.CharField(blank=True, default='', help_text='Ex: 40 horas, 20h teóricas + 20h práticas', max_length=50, verbose_name='Carga Horária')),
                ('docente', models.CharField(blank=True, default='', help_text='Nome do professor/instrutor', max_length=100, verbose_name='Docente/Instrutor')),
                ('vagas', models.IntegerField(help_text='Total de vagas disponíveis', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Número de Vagas')),
                ('vagas_minimas', models.IntegerField(default=1, help_text='Mínimo de alunos para viabilizar o curso', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Vagas Mínimas')),
                ('modalidade', models.CharField(choices=[('PRESENCIAL', 'Presencial'), ('ONLINE', 'Online'), ('HIBRIDO', 'Híbrido')], default='PRESENCIAL', max_length=15, verbose_name='Modalidade')),
                ('inicio_inscricoes', models.DateField(blank=True, null=True, verbose_name='Início das Inscrições')),
                ('fim_inscricoes', models.DateField(blank=True, null=True, verbose_name='Fim das Inscrições')),
                ('inicio_matricula', models.DateField(blank=True, help_text='Data para iniciar matrículas dos classificados', null=True, verbose_name='Início das Matrículas')),
                ('fim_matricula', models.DateField(blank=True, null=True, verbose_name='Fim das Matrículas')),
                ('inicio_aulas', models.DateField(blank=True, null=True, verbose_name='Início das Aulas')),
                ('fim_aulas', models.DateField(blank=True, null=True, verbose_name='Fim das Aulas')),
                ('horario_aulas', models.CharField(blank=True, default='', help_text='Ex: Segunda a Sexta, 14h às 18h', max_length=100, verbose_name='Horário das Aulas')),
                ('local', models.CharField(blank=True, default='', help_text='Nome do local (ex: Sala 3, Laboratório de Informática)', max_length=100, verbose_name='Local')),
                ('endereco_local', models.CharField(blank=True, default='', help_text='Endereço completo onde será realizado', max_length=200, verbose_name='Endereço do Local')),
                ('observacao', models.TextField(blank=True, default='', help_text='Informações adicionais', verbose_name='Observações')),
                ('criado_em', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('atualizado_em', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Evento/Curso',
                'verbose_name_plural': 'Eventos/Cursos',
                'ordering': ['-criado_em'],
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(help_text='Nome do status (ex: Inscrições Abertas, Em Andamento, Encerrado)', max_length=30, unique=True, verbose_name='Status')),
                ('permite_inscricao', models.BooleanField(default=False, help_text='Se TRUE, interessados podem se inscrever neste status', verbose_name='Permite Inscrição')),
                ('ordem', models.IntegerField(default=0, help_text='Ordem de exibição (menor número aparece primeiro)', verbose_name='Ordem')),
            ],
            options={
                'verbose_name': 'Status',
                'verbose_name_plural': 'Status',
                'ordering': ['ordem', 'status'],
            },
        ),
        migrations.CreateModel(
            name='EventoCriterio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('peso', models.IntegerField(default=5, help_text='Importância deste critério (0=irrelevante, 10=máximo)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Peso (0-10)')),
                ('tipo_reserva', models.CharField(choices=[('PERCENTUAL', 'Percentual (%)'), ('NUMERO_FIXO', 'Número Fixo de Vagas'), ('SEM_RESERVA', 'Sem Reserva (Apenas Pontuação)')], default='SEM_RESERVA', help_text='Como as vagas serão reservadas', max_length=15, verbose_name='Tipo de Reserva de Vagas')),
                ('vagas_reservadas', models.IntegerField(default=0, help_text='Se PERCENTUAL: valor de 0-100. Se NUMERO_FIXO: quantidade de vagas', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Vagas Reservadas')),
                ('ordem', models.IntegerField(default=1, help_text='Ordem em que o critério será processado (1=primeiro)', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Ordem de Aplicação')),
                ('ordem_idade', models.CharField(blank=True, choices=[('CRESCENTE', 'Crescente (Mais Jovem Primeiro)'), ('DECRESCENTE', 'Decrescente (Mais Velho Primeiro)'), ('FAIXA', 'Faixa Etária (Entre Idades)')], help_text='Usado apenas para critérios de tipo IDADE', max_length=15, null=True, verbose_name='Ordem de Idade')),
                ('idade_minima', models.IntegerField(blank=True, help_text='Para FAIXA_ETARIA: idade mínima prioritária', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(120)], verbose_name='Idade Mínima')),
                ('idade_maxima', models.IntegerField(blank=True, help_text='Para FAIXA_ETARIA: idade máxima prioritária', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(120)], verbose_name='Idade Máxima')),
                ('observacao', models.TextField(blank=True, default='', help_text='Informações adicionais sobre este critério no evento', verbose_name='Observações')),
                ('criterio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evento_criterios', to='cursoseoutros.criterio', verbose_name='Critério')),
                ('evento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evento_criterios', to='cursoseoutros.evento', verbose_name='Evento')),
            ],
            options={
                'verbose_name': 'Critério do Evento',
                'verbose_name_plural': 'Critérios dos Eventos',
                'ordering': ['evento', 'ordem', '-peso'],
                'unique_together': {('evento', 'criterio')},
            },
        ),
        migrations.AddField(
            model_name='evento',
            name='criterios',
            field=models.ManyToManyField(related_name='eventos', through='cursoseoutros.EventoCriterio', to='cursoseoutros.criterio', verbose_name='Critérios de Classificação'),
        ),
        migrations.CreateModel(
            name='Inscricao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_inscricao', models.DateTimeField(default=django.utils.timezone.now, help_text='Data e hora em que a inscrição foi realizada', verbose_name='Data da Inscrição')),
                ('status', models.CharField(choices=[('INSCRITO', 'Inscrito'), ('AGUARD_CLASS', 'Aguardando Classificação'), ('CLASSIFICADO', 'Classificado'), ('APROVADO', 'Aprovado (Dentro das Vagas)'), ('FILA_ESPERA', 'Fila de Espera'), ('MATRICULADO', 'Matriculado'), ('DESISTENTE', 'Desistente'), ('NAO_COMPARECEU', 'Não Compareceu')], default='INSCRITO', max_length=20, verbose_name='Status da Inscrição')),
                ('evento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inscricoes', to='cursoseoutros.evento', verbose_name='Evento')),
                ('interessado', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inscricoes', to='interessados.interessado', verbose_name='Interessado')),
            ],
            options={
                'verbose_name': 'Inscrição',
                'verbose_name_plural': 'Inscrições',
                'ordering': ['data_inscricao'],
                'unique_together': {('evento', 'interessado')},
            },
        ),
        migrations.CreateModel(
            name='Classificacao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Pontuação total calculada pelos critérios', max_digits=10, verbose_name='Score Total')),
                ('posicao', models.IntegerField(blank=True, help_text='Posição final na classificação (1=primeiro lugar)', null=True, verbose_name='Posição/Classificação')),
                ('data_classificacao', models.DateTimeField(default=django.utils.timezone.now, help_text='Quando a classificação foi processada', verbose_name='Data da Classificação')),
                ('inscricao', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='classificacao', to='cursoseoutros.inscricao', verbose_name='Inscrição')),
            ],
            options={
                'verbose_name': 'Classificação',
                'verbose_name_plural': 'Classificações',
                'ordering': ['inscricao__evento', 'posicao'],
            },
        ),
        migrations.CreateModel(
            name='Matricula',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_matricula', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Data da Matrícula')),
                ('status', models.CharField(choices=[('PENDENTE', 'Pendente'), ('CONFIRMADA', 'Confirmada'), ('CANCELADA', 'Cancelada'), ('TRANCADA', 'Trancada')], default='PENDENTE', max_length=15, verbose_name='Status da Matrícula')),
                ('interessado', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matriculas', to='interessados.interessado', verbose_name='Interessado')),
            ],
            options={
                'verbose_name': 'Matrícula',
                'verbose_name_plural': 'Matrículas',
                'ordering': ['turma', 'data_matricula'],
            },
        ),
        migrations.CreateModel(
            name='Avaliacao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frequencia', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Percentual de presença (0-100%)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Frequência (%)')),
                ('nota', models.DecimalField(blank=True, decimal_places=2, help_text='Nota final (0-10)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Nota')),
                ('aprovado', models.BooleanField(default=False, help_text='Se o aluno foi aprovado no curso', verbose_name='Aprovado')),
                ('emite_certificado', models.BooleanField(default=False, help_text='Se deve emitir certificado para este aluno', verbose_name='Emite Certificado')),
                ('matricula', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='avaliacao', to='cursoseoutros.matricula', verbose_name='Matrícula')),
            ],
            options={
                'verbose_name': 'Avaliação',
                'verbose_name_plural': 'Avaliações',
                'ordering': ['matricula__turma'],
            },
        ),
        migrations.AddField(
            model_name='evento',
            name='status',
            field=models.ForeignKey(help_text='Status atual do evento', on_delete=django.db.models.deletion.PROTECT, related_name='eventos', to='cursoseoutros.status', verbose_name='Status'),
        ),
        migrations.CreateModel(
            name='Turma',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao_turma', models.CharField(help_text='Ex: Turma A - Manhã, Turma Avançada', max_length=100, verbose_name='Descrição da Turma')),
                ('data_inicio', models.DateField(blank=True, null=True, verbose_name='Data de Início')),
                ('data_fim', models.DateField(blank=True, null=True, verbose_name='Data de Término')),
                ('horario_aulas', models.CharField(blank=True, default='', help_text='Ex: Segunda a Sexta, 8h às 12h', max_length=100, verbose_name='Horário das Aulas')),
                ('local_aulas', models.CharField(blank=True, default='', help_text='Sala/local específico desta turma', max_length=100, verbose_name='Local das Aulas')),
                ('evento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='turmas', to='cursoseoutros.evento', verbose_name='Evento')),
            ],
            options={
                'verbose_name': 'Turma',
                'verbose_name_plural': 'Turmas',
                'ordering': ['evento', 'descricao_turma'],
            },
        ),
        migrations.AddField(
            model_name='matricula',
            name='turma',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matriculas', to='cursoseoutros.turma', verbose_name='Turma'),
        ),
        migrations.CreateModel(
            name='InscricaoCriterioAtendido',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pontos_obtidos', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Pontos atribuídos por este critério', max_digits=10, verbose_name='Pontos Obtidos')),
                ('validado', models.BooleanField(default=False, help_text='Para critérios customizados: se foi validado manualmente', verbose_name='Validado')),
                ('data_validacao', models.DateTimeField(blank=True, null=True, verbose_name='Data da Validação')),
                ('criterio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inscricoes_atendidas', to='cursoseoutros.criterio', verbose_name='Critério')),
                ('inscricao', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='criterios_atendidos', to='cursoseoutros.inscricao', verbose_name='Inscrição')),
                ('validado_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='criterios_validados', to=settings.AUTH_USER_MODEL, verbose_name='Validado Por')),
            ],
            options={
                'verbose_name': 'Critério Atendido',
                'verbose_name_plural': 'Critérios Atendidos',
                'ordering': ['inscricao', '-pontos_obtidos'],
                'unique_together': {('inscricao', 'criterio')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='matricula',
            unique_together={('turma', 'interessado')},
        ),
    ]
